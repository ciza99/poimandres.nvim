local p = require("poimandres.palette")
local blend = require("poimandres.utils").blend

local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function()
	-- highlights
	hl(0, "Normal", { fg = p.white, bg = p.bg })
	hl(0, "SignColumn", { fg = "NONE", bg = p.bg })
	hl(0, "Pmenu", { fg = "NONE", bg = p.bg })
	hl(0, "PmenuSel", { fg = "NONE", bg = p.focus })
	hl(0, "CursorLineNr", { fg = p.darkerGray, bg = p.none })
	hl(0, "LineNr", { fg = p.focus, bg = p.none })
	hl(0, "Comment", { fg = p.bluishGray, bg = p.none, italic = false })
	hl(0, "Folded", { fg = p.white, bg = p.none })
	hl(0, "FoldColumn", { fg = p.darkerGray, bg = p.bg })
	hl(0, "FloatBorder", { fg = p.focus, bg = p.bg })
	hl(0, "FloatTitle", { fg = p.darkerGray, bg = p.bg, bold = true })
	hl(0, "VertSplit", { fg = p.focus, bg = p.none })
	hl(0, "CursorLine", { fg = p.none, bg = p.focus })
	hl(0, "CursorColumn", { fg = p.none, bg = p.focus })
	hl(0, "ColorColumn", { fg = p.none, bg = p.bluishGray })
	hl(0, "NormalFloat", { fg = p.offWhite, bg = p.bg, sp = "NONE", blend = 0 })
	hl(0, "Visual", { link = "VisualActive" })
	hl(0, "VisualActive", { fg = "NONE", bg = p.focus })
	hl(0, "VisualInactive", { fg = "NONE", bg = p.bg })
	hl(0, "DiffAdd", { fg = p.none, bg = blend(p.lowerMint, p.bg, 0.5) })
	hl(0, "DiffChange", { fg = p.none, bg = p.bluishGray })
	hl(0, "DiffDelete", { fg = p.none, bg = blend(p.hotRed, p.bg, 0.5) })
	-- hl(0, "QuickFixLine", { fg = p.none, bg = p.quickfix_line })
	hl(0, "MatchParen", { fg = p.none, bg = p.focus })
	hl(0, "Cursor", { fg = p.white, bg = p.none })
	-- hl(0, "lCursor", { fg = c.cursor_fg, bg = "NONE" })
	-- hl(0, "CursorIM", { fg = c.cursor_fg, bg = "NONE" })
	-- hl(0, "TermCursor", { fg = c.cursor_fg, bg = "NONE" })
	-- hl(0, "TermCursorNC", { fg = c.cursor_fg, bg = "NONE" })
	hl(0, "Directory", { fg = p.lowerBlue, bg = p.none })
	hl(0, "Title", { fg = p.offWhite, bg = "NONE", bold = true })
	hl(0, "ErrorMsg", { link = "Error" })
	hl(0, "Search", { fg = "NONE", bg = p.focus })
	hl(0, "NonText", { fg = p.desaturatedBlue, bg = "NONE" })
	hl(0, "Variable", { fg = p.white, bg = "NONE" })
	hl(0, "String", { fg = p.brightMint, bg = "NONE" })
	hl(0, "Constant", { fg = p.white, bg = "NONE", italic = false })
	hl(0, "Number", { fg = p.brightMint, bg = "NONE" })
	hl(0, "Boolean", { fg = p.hotRed, bg = "NONE", italic = false })
	hl(0, "Identifier", { fg = p.white, bg = "NONE" })
	hl(0, "Function", { fg = p.desaturatedBlue, bg = "NONE", italic = false })
	hl(0, "Operator", { fg = p.bluishGrayBrighter, bg = "NONE" })
	hl(0, "Type", { fg = p.bluishGrayBrighter, bg = "NONE" })
	hl(0, "Keyword", { fg = p.brightMint, bg = "NONE" })
	hl(0, "Statement", { fg = p.offWhite, bg = "NONE", italic = false })
	hl(0, "Conditional", { fg = p.bluishGrayBrighter, bg = "NONE" })
	hl(0, "Include", { fg = p.bluishGrayBrighter, bg = "NONE", italic = false })
	hl(0, "PreProc", { fg = p.offWhite, bg = "NONE" })
	hl(0, "Special", { fg = p.bluishGrayBrighter, bg = "NONE" })
	hl(0, "Tag", { fg = p.offWhite, bg = "NONE" })
	hl(0, "Delimiter", { fg = p.bluishGrayBrighter, bg = "NONE" })
	hl(0, "Error", { fg = p.hotRed, bg = "NONE" })
	-- hl(0, "IndentChar", { fg = p.bluishGrayBrighter, bg = "NONE" })
	-- hl(0, "IndentContextChar", { fg = c.magenta3, bg = "NONE" })
	hl(0, "TabLineSel", { fg = p.white, bg = p.bg })
	hl(0, "TabLine", { fg = p.focus, bg = p.bg })
	hl(0, "TabLineFill", { fg = p.none, bg = "NONE" })

	-- Treesitter
	hl(0, "@class.constructor", { fg = p.desaturatedBlue, bg = "NONE", italic = false })
	hl(0, "@class.field.function", { link = "Function" })
	hl(0, "@type", { link = "Type" })
	hl(0, "@type.class", { link = "Type" })
	-- hl(0, "@type.inheritedClass", { fg = c.green, bg = "NONE", nocombine = true })
	-- hl(0, "@type.toml", { fg = c.green, bg = "NONE", italic = true })
	-- hl(0, "tomlTable", { fg = c.green, bg = "NONE", italic = true })
	-- hl(0, "@type.builtin", { fg = c.green, bg = "NONE" })
	-- hl(0, "@include.identifier", { fg = c.fg, bg = "NONE", nocombine = true })
	hl(0, "@keyword", { link = "Keyword" })
	hl(0, "@keyword.return", { link = "Statement" })
	hl(0, "@keyword.export", { link = "Statement" })
	-- hl(0, "@keyword.function.lua", { fg = p.magenta, bg = "NONE", italic = true })
	-- hl(0, "@keyword.function.vim", { fg = c.magenta, bg = "NONE", italic = true })
	hl(0, "@keyword.function.return", { link = "Keyword" })
	-- hl(0, "@keyword.abort", { fg = c.magenta, bg = "NONE", italic = true })
	hl(0, "@keyword.default", { link = "Statement" })
	hl(0, "@keyword.static", { link = "Statement" })
	hl(0, "@keyword.extends", { link = "Statement" })
	hl(0, "@keyword.coroutine", { link = "Statement" })
	hl(0, "@keyword.operator", { link = "Operator" })
	-- hl(0, "@keyword.jsdoc", { fg = c.magenta, bg = "NONE", nocombine = true })
	-- hl(0, "@keyword.command", { fg = c.green, bg = "NONE", nocombine = true })
	-- hl(0, "@command", { fg = c.green, bg = "NONE", nocombine = true })
	-- hl(0, "@label", { fg = c.cyan2, bg = "NONE" })
	-- hl(0, "@namespace.vim", { fg = c.light_blue, bg = "NONE", italic = true })
	-- hl(0, "@conditional.lua", { link = "Conditional" })
	hl(0, "@constant", { link = "Constant" })
	hl(0, "@constant.identifier", { link = "Constant" })
	hl(0, "@constant.builtin", { link = "Constant" })
	hl(0, "@constant.builtin.null", { fg = p.hotRed, bg = "NONE" })
	hl(0, "@variable", { link = "Variable" })
	hl(0, "@variable.builtin", { link = "Variable" })
	hl(0, "@variable.object", { link = "Variable" })
	-- hl(0, "@variable.lua", { fg = c.green, bg = "NONE" })
	-- hl(0, "@variable.vim", { fg = c.green, bg = "NONE" })
	hl(0, "@property", { fg = p.white, bg = "NONE" })
	-- hl(0, "tomlKey", { fg = c.magenta, bg = "NONE", nocombine = true })
	-- hl(0, "@property.toml", { link = "@property" })
	hl(0, "tomlKeySq", { fg = p.pink, bg = "NONE", nocombine = true })
	hl(0, "@object.property", { fg = p.lowerBlue, bg = "NONE", italic = false })
	hl(0, "@object.key", { fg = p.lowerBlue, bg = "NONE", italic = false })
	hl(0, "@field", { fg = p.offWhite, bg = "NONE" })
	hl(0, "@parameter", { fg = p.offWhite, bg = "NONE" })
	hl(0, "@parameter.jsdoc", { fg = p.offWhite, bg = "NONE" })
	-- hl(0, "@text.literal", { fg = c.green, bg = "NONE" })
	-- hl(0, "@text.uri", { fg = c.light_red, bg = "NONE", underline = true })
	-- hl(0, "@text.emphasis", { fg = c.magenta, bg = "NONE", italic = false })
	-- hl(0, "@text.strong", { fg = c.green, bg = "NONE", bold = true })
	-- hl(0, "@text.todo", { fg = c.bg, bg = c.fg })
	-- hl(0, "@operator.lua", { fg = c.cyan2, bg = "NONE" })
	-- hl(0, "@operator.toml", { fg = c.fg, bg = "NONE" })
	-- hl(0, "@operator.of", { fg = c.cyan2, bg = "NONE" })
	hl(0, "@tag.component.jsx", { fg = p.brightMint, bg = "NONE", nocombine = true })
	hl(0, "@tag.delimiter", { fg = p.brightMint, bg = "NONE" })
	hl(0, "@tag.attribute", { fg = p.bluishGrayBrighter, bg = "NONE", italic = true })
	-- hl(0, "@punctuation.string.delimiter", { fg = c.string_delimiter, bg = "NONE", nocombine = true })
	-- hl(0, "@punctuation.accessor", { link = "Statement" })
	hl(0, "@string.json", { link = "String" })
	hl(0, "@string.regex", { fg = p.lowerBlue, bg = "NONE", nocombine = true })
	hl(0, "@string.regexFlags", { fg = p.lightBlue, bg = "NONE", nocombine = true })
	-- hl(0, "@function.builtin.lua", { fg = p.blue, bg = "NONE", italic = false })

	-- Whichkey

	-- Git
	hl(0, "GitSignsAdd", { fg = p.brightMint, bg = "NONE" })
	hl(0, "GitSignsChange", { fg = p.desaturatedBlue, bg = "NONE" })
	hl(0, "GitSignsDelete", { fg = p.pink, bg = "NONE" })
	hl(0, "GitSignsChangedelete", { fg = p.brightYellow, bg = "NONE" })
	hl(0, "GitGutterAdd", { fg = p.brightMint, bg = "NONE" })
	hl(0, "GitGutterChange", { fg = p.desaturatedBlue, bg = "NONE" })
	hl(0, "GitGutterDelete", { fg = p.pink, bg = "NONE" })
	hl(0, "GitGutterChangeDelete", { fg = p.brightYellow, bg = "NONE" })

	-- LSP
	hl(0, "DiagnosticError", { link = "Error" })
	hl(0, "LspInfoBorder", { fg = p.focus, bg = "NONE" })

	-- SemanticTokens
	hl(0, "@lsp.type.parameter", { fg = p.white, bg = "NONE" })
	hl(0, "@lsp.type.property", { fg = p.white, bg = "NONE" })
	hl(0, "@lsp.type.variable", { fg = p.white, bg = "NONE" })
	hl(0, "@lsp.type.variable.lua", { fg = p.white, bg = "NONE" })

	-- Telescope
	hl(0, "TelescopeSelection", { fg = "NONE", bg = p.focus })
	hl(0, "TelescopeMatching", { fg = p.white, bg = "NONE", bold = true })
	hl(0, "TelescopeBorder", { fg = p.focus, bg = "NONE" })

	-- NvimTree
	-- hl(0, "NvimTreeIndentMarker", { fg = c.nvim_tree_indent_marker, bg = "NONE" })
	-- hl(0, "NvimTreeNormal", { fg = c.dark_white, bg = "NONE" })
	-- hl(0, "NvimTreeNormalNC", { fg = c.ui_border, bg = "NONE" })
	-- hl(0, "NvimTreeSpecialFile", { fg = c.orange, bg = "NONE" })
	-- hl(0, "NvimTreeOpenedFile", { fg = "NONE", bg = "NONE", bold = true })
	-- hl(0, "NvimTreeImageFile", { fg = c.nvim_tree_file, bg = "NONE" })
	-- hl(0, "NvimTreeCursorLine", { fg = "NONE", bg = c.quickfix_line })
	-- hl(0, "NvimTreeGitStaged", { fg = c.sign_change, bg = "NONE" })
	-- hl(0, "NvimTreeGitNew", { fg = c.green, bg = "NONE" })
	-- hl(0, "NvimTreeGitRenamed", { fg = c.sign_add, bg = "NONE" })
	-- hl(0, "NvimTreeGitDeleted", { fg = c.sign_delete, bg = "NONE" })
	-- hl(0, "NvimTreeGitDirty", { fg = c.changed, bg = "NONE" })
	-- hl(0, "NvimTreeRootFolder", { fg = c.magenta, bg = "NONE" })
	-- hl(0, "NvimTreeWindowPicker", { fg = c.orange2, bg = c.dark, bold = true, italic = true })

	-- Buffer

	-- StatusLine

	-- IndentBlankline
	hl(0, "IndentBlanklineChar", { link = "IndentChar" })
	hl(0, "IndentBlanklineSpaceChar", { link = "IndentChar" })
	hl(0, "IndentBlanklineSpaceCharBlankline", { link = "IndentChar" })
	hl(0, "IndentBlanklineContextChar", { link = "IndentContextChar" })
	hl(0, "IndentBlanklineContextStart", { fg = "NONE", bg = "NONE", sp = p.focus, underline = true })

	-- Dashboard

	-- Cmp

	-- Illuminate
	-- hl(0, "IlluminatedWordText", { fg = "NONE", bg = c.word_highlight })
	-- hl(0, "IlluminatedWordRead", { fg = "NONE", bg = c.word_highlight })
	-- hl(0, "IlluminatedWordWrite", { fg = "NONE", bg = c.word_highlight })

	-- DevIcons
	hl(0, "DevIconLua", { fg = p.lightBlue, bg = "NONE" })
end

return theme
